#!/usr/bin/env python3
import os
import subprocess

# TODO Assign in order 1234 567 890

# List the IDs (or names) of the matching monitors
# -> CompletedProcess(args=['bspc', 'query', '-M'], returncode=0, stdout=b'0x0040000E\n0x00400010\n0x00400012\n')
monitors_output = subprocess.run(['bspc', 'query', '--monitors', '--names'], stdout=subprocess.PIPE)

# Parse the monitor list command into an array of monitor IDs
# -> ['0x0040000E', '0x00400010', '0x00400012']
monitors = monitors_output.stdout.decode('utf-8').strip().split('\n')

# Move the primary monitor to the front
primary_output = subprocess.run('xrandr | grep "connected primary" | cut -d" " -f1', stdout=subprocess.PIPE, shell=True)
primary = primary_output.stdout.decode('utf-8').strip()
monitors.remove(primary)
monitors.insert(0, primary)

method = 1

# Parse a string of strings to an array of available workspaces
# -> ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0']
workspaces = os.environ.get('BSPWM_WORKSPACES', '1 2 3 4 5 6 7 8 9 0').split(' ')
workspaces_per_monitor = 5

assigned = {}

# Populate assigned{monitor['workspace']}

if method == 1:
    # Method 1: N total workspaces, evenly split amongst available monitors
    i = 0
    full_monitors = []
    while not i >= len(workspaces):
        for monitor in monitors:
            try:
                assigned[monitor]
            except KeyError:
                assigned[monitor] = ''
            if monitor not in full_monitors:
                assigned[monitor] += workspaces[i]

            i += 1
            if i >= len(workspaces):
                break
            if len(assigned[monitor]) >= workspaces_per_monitor:
                full_monitors.append(monitor)

elif method == 2:
    # Method 2: N workspaces per monitor
    i = 0
    for monitor in monitors:
        assigned[monitor] = ""
        for i in range(workspaces_per_monitor):
            assigned[monitor] += str(i+1)

print(assigned)
for monitor in monitors:
    command = ['bspc', 'monitor', monitor, '--reset-desktops']
    command.extend(list(assigned[monitor]))
    print(command)
    subprocess.call(command)
