#!/usr/bin/env bash
# vim: set foldmethod=marker foldlevel=0 nomodeline:

# General config {{{
bspc config split_ratio 0.52
bspc config automatic_scheme    alternate
bspc config initial_polarity    second_child
bspc config pointer_modifier    mod4
bspc config pointer_action1     move
bspc config pointer_action2     resize_side
bspc config pointer_action3     res1ze_corner
bspc config click_to_focus      any
bspc config swallow_first_click false

bspc config focus_follows_pointer      true
bspc config pointer_follows_focus      false
bspc config pointer_follows_monitor    false
bspc config remove_disabled_monitors   true
bspc config remove_unplugged_monitors  true
bspc config merge_overlapping_monitors true

bspc config border_width 3
#bspc config normal_border_color   "#2e2e2e"
#bspc config active_border_color   "#2e2e2e"
#bspc config focused_border_color  "#13141d"
bspc config normal_border_color   "#0D1117"
bspc config active_border_color   "#13141d"
bspc config focused_border_color  "#306998"
bspc config presel_feedback_color "#5e81ac"
bspc config urgent_border_color   "#dd2727"

bspc config window_gap     10
bspc config top_padding    0
bspc config bottom_padding 0
bspc config left_padding   0
bspc config right_padding  0

bspc config borderless_monocle true
bspc config gapless_monocle    true
bspc config single_monocle     false # bspwm_rofi_layouts will show monocle when single node
bspc config left_monocle_padding   5
bspc config right_monocle_padding  5
bspc config top_monocle_padding    5
bspc config bottom_monocle_padding 5
#bspc config left_monocle_padding   500
#bspc config right_monocle_padding  500
#bspc config top_monocle_padding    80
#bspc config bottom_monocle_padding 80
# }}}

# Rules {{{
bspc rule -r "*"
bspc rule -a discord                         desktop=^2
bspc rule -a Mattermost                      desktop=^2
bspc rule -a slack                           desktop=^2
bspc rule -a TelegramDesktop                 desktop=^2 state=floating rectangle="1066x600+0+0"
bspc rule -a Steam                           desktop=^5
bspc rule -a org.remmina.Remmina             desktop=^5
bspc rule -a Anki                            desktop=^9
bspc rule -a Insync                          desktop=^0
bspc rule -a Screenkey                       manage=off
bspc rule -a Zathura                         state=tiled
bspc rule -a Pavucontrol                     state=floating
bspc rule -a mpv                             state=floating
bspc rule -a keepass2                        state=floating
bspc rule -a sun-awt-X11-XFramePeer          state=floating
bspc rule -a com-sun-javaws-Main             state=floating
bspc rule -a org-geogebra-desktop-GeoGebra3D state=floating
bspc rule -a Dragon-drop                     state=floating sticky=on border=off
bspc rule -a '*:scratchpad'                  state=floating sticky=on
bspc rule -a '*:math'                        state=floating sticky=on

#on=14 off=0
#bspc query -N -n .floating.window | xargs -I {node} bspc config -n {node} border_width "$on"
#bspc query -N -n .!floating.window | xargs -I {node} bspc config -n {node} border_width "$off"
#while read -r _ _ _ node state status; do
#    [[ "$state" == "floating" ]] && bspc config -n "$node" border_width "${!status}"
#done < <(bspc subscribe node_state)
# }}}

#exec_once () { # {{{
#  # Note: Most programs are started in .xprofile
#  cmd="${1}" # $1: command to run
#  pid="${2:-${cmd%% *}}" # $2: what to check the pid of, defaults to first word of $1
#  if ! pgrep -f "${pid}" >/dev/null 2>&1; then
#    if command -v "${cmd}" >/dev/null 2>&1; then
#      eval "${cmd} &"
#    fi
#  fi
#}

# Loop through all monitors and change name
# mon_i=1
# for monitor in $(bspc query -M); do
#   bspc monitor "${monitor}" --rename "${mon_i}"
#   mon_i="$((mon_i + 1))"
# done

# Programs that should be executed once generally belong in ~/.xinitrc
# "${XDG_CONFIG_HOME:-${HOME:-~}/.config}/polybar/launch.sh" main &
polybar_run &
# "${XDG_CONFIG_HOME:-${HOME:-~}/.config}/bspwm/scripts/bspwm_monitors" &
# "${XDG_CONFIG_HOME:-${HOME}/.config}/bspwm/scripts/cleanfullscreen" &
# "${XDG_CONFIG_HOME:-${HOME}/.config}/bspwm/scripts/single_node_border" &
(~/.fehbg || (feh --bg-scale "${XDG_CONFIG_HOME:-${HOME:-~}/.config}/wall.jpg" || nitrogen --restore)) &
killall -q sxhkd; sxhkd -m 1 -c "${XDG_CONFIG_HOME:-${HOME:-~}/.config}/sxhkd/sxhkdrc" "${XDG_CONFIG_HOME:-${HOME:-~}/.config}/bspwm/sxhkdrc" &
# killall -q bspwm_double_borders; "${XDG_CONFIG_HOME:-${HOME:-~}/.config}/bspwm/scripts/bspwm_double_borders" &
# }}}
