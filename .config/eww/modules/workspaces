#!/bin/bash

get_workspaces () {
  # Get id, active status (*=active), and name
  # Remove NSP-workpace
  # Only get active monitor if defined
  # _NET_DESKTOP_NAMES
  wmctrl -d \
    | awk '{ print $1 " " $2 " " $NF }' \
    | grep -v "NSP" \
    | grep "${MONITOR:-}"
}

get_yuck () {
  get_workspaces | while read -r id active name; do
    # Get content after '_' (if monitor is defined)
    name="$(printf '%s\n' "${name}" | cut -d '_' -f2)"
    class=""

    # TODO Use _XMONAD_VISIBLE_WORKSPACES to highlight visible workspaces (on different monitors)

    # Add class if workspace is active
    test "${active}" = "*" && class="${class:-}${class:+ }active"

    # Add class if workspace has any nodes
    case "$(wmctrl -l | awk '{print "(" $2}' | tr '\n' ')')" in
      *"(${id})"*) class="${class:-} occupied";;
    esac

    # Format workspace-box
    printf '%s' "(button${class:+ :class '${class:-}'} :onclick 'wmctrl -s ${id}' '${name}')"
  done
}

listen () {
  xprop -spy -root _NET_CURRENT_DESKTOP _NET_CLIENT_LIST | while read -r; do
    # If wses get left behind or updated weirdly, add a small delay to allow
    # the wm some wiggle room to manage desktops.
    # Might be required when using _NET_CURRENT_DESKTOP.
    sleep .02

    # When listening for changed on _NET_ACTIVE_WINDOW, this prevents the CPU from
    # going ham when switching between windows frquently by only updating eww when
    # the desktop changes. We use both ID ($1) and name ($NF) because neither are
    # technically unique, and will break the check if there are multiple desktops
    # with the same name or ID.
    # ws_id="$(wmctrl -d | awk '$2 == "*" { print $1 }')"
    ws_id="$(xprop -root _NET_CURRENT_DESKTOP | awk '{print $NF}')"
    ws_name="$(wmctrl -d | awk '$2 == "*" { print $NF }')"
    ws="${ws_id}-${ws_name}"
    nodes="$(wmctrl -l | awk '{print "(" $2}' | tr '\n' ')' | grep -o "(${ws_id})" | wc -l)"

    # Only update eww when the currently active workspace is different from the
    # previously active workspace, or there are fewer nodes on the active ws than last time.
    if test "${ws:-}" != "${previous_ws:-nil}" \
         -o "${nodes:-0}" -lt "${previous_nodes:-0}"; then
			read -r -d '' yuck <<-EOYUCK
			(box :orientation "h"
			     :class "workspaces"
			     :space-evenly true
			     :halign "start"
			     :valign "center"
			     :vexpand true
			     $(get_yuck))
			EOYUCK
      paste -s -d ' ' <<< "${yuck}"
    fi

    previous_ws="${ws}"
    previous_nodes="${nodes}"
  done
}

go_to () {
  operator="${1:-}"
  ws_n="$(($(get_workspaces | wc -l) - 1))"
  ws_id="$(xprop -root _NET_CURRENT_DESKTOP | awk '{print $NF}')"
  ws_next="$((ws_id ${operator}))"

  test "${ws_next}" -lt "0"       && ws_next="0"
  test "${ws_next}" -ge "${ws_n}" && ws_next="${ws_n}"

  wmctrl -s "${ws_next}"
}

case "${1:-}" in
  up) go_to "-1";;
  down) go_to "+1";;
  *) listen;;
esac
