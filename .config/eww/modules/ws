#!/bin/bash

monitor="${1:-}${1:+_}"

get_workspaces () {
  # Get id, active status (*=active), and name
  # Remove NSP-workpace
  # Only get active monitor if defined
  wmctrl -d \
    | awk '{ print $1 " " $2 " " $NF }' \
    | grep -v "NSP" \
    | grep "${monitor:-}"
}

get_yuck () {
  get_workspaces | while read -r id active name; do
    # Get content after '_' (if monitor is defined)
    name="$(printf '%s\n' "${name}" | cut -d '_' -f2)"
    class=""

    # Add class if workspace is active
    test "${active}" = "*" && class="${class:-}${class:+ }active"

    # Add class if workspace has any nodes
    case "$(wmctrl -l | awk '{print "(" $2}' | tr '\n' ')')" in
      *"(${id})"*) class="${class:-}${class:+ }occupied";;
    esac

    # Format workspace-box
    # printf '%s' "${class:+ :class '${class:-}'}"
    #test "${name}" = "6" && echo $class
    printf '%s' "(button${class:+ :class '${class:-}'} :onclick 'wmctrl -s ${id}' '${name}')"
  done
}

xprop -spy -root _NET_ACTIVE_WINDOW | while read -r; do
  # id="$(xprop -notype -root _NET_CURRENT_DESKTOP | cut -c 24-)"
  # wmctrl -d | awk "/^${id}/"
  sleep .01 # Give the wm time to switch to ws
  printf '%s\n' '(box :orientation "h" :class "workspaces" :space-evenly true :halign "start" :valign "center" :vexpand true '"$(get_yuck)"')'
done
