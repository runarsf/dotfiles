; -*- mode: lisp -*-
; Docs: https://elkowar.github.io/eww/configuration.html
; Tray support: https://github.com/elkowar/eww/issues/111
; Author dotfiles: https://github.com/elkowar/dots-of-war/tree/master/eww-bar/.config/eww-bar

; wlan alsa pulseaudio cpu memory backlight battery date powermenu

; Variables {{{
(defvar eww "eww -c ~/.config/eww")
(defvar revealvol false)
(defvar revealbat false)
(defvar revealram false)
(defvar revealcpu false)
(defvar revealdisk false)
(defvar revealtime false)
(defvar revealpower false)
; }}}

(defwindow bar ; {{{
  :monitor 0
  :windowtype "dock"
  :stacking "bg"
  :wm-ignore false
  :hexpand false
  :vexpand false
  :geometry (geometry :x "0%"
                      :y "10px"
                      :width "99%"
                      :height "35px" ; NOTE Has to be odd for pixel-perfect vertical centering
                      :anchor "top center")
  :reserve (struts :side "top"
                   :distance "40px")
  (bar))
; }}}

(defwidget bar [] ; {{{
  (centerbox :orientation "h"
    (workspaces)
    (info)
    (modules)))
; }}}

; TODO Scroll to change ws (eventbox?)
(defwidget workspaces [] ; {{{
  (box :space-evenly false
       :orientation "h"
       :halign "start"
    (box ; TODO Return only a set of boxes without a container box?
      (eventbox
        (literal :class "container"
                 :content workspaces))) ; :onscroll "modules/workspaces {}"
    (box :class "spaced"
      (button :onclick "bspwm_rofi_layouts"
        (label :text bsplayout)))))
(deflisten workspaces
  "modules/workspaces")
(defpoll bsplayout :interval "5s"
  "bspwm_rofi_layouts query")
; }}}

(defwidget info [] ; {{{
  (box :class "info"
       :orientation "h"
       :space-evenly false
       :halign "center"
   {music != "" ? "🎵 ${music}" : "${title}"}))
; }}}

(defwidget modules [] ; {{{
  (box :class "modules"
       :orientation "h"
       :space-evenly false
       :halign "end"
    (box :tooltip "Autorandr" ; {{{
         :class "spaced"
      (button :onclick "rofi-autorandr" ; TODO Symlink rofi-autorandr into modules
        ; TODO Middle-click autorandr --change
        (label :text ""))) ; }}}
    (box :tooltip "Memory" ; {{{
      (hover-double :var revealram
                    :varname "revealram"
        (scale :min 0
               :max 101
               :value {EWW_RAM.used_mem_perc})
        (label :text "${round(EWW_RAM.used_mem_perc, 0)}%")
        (label :text ""))) ; }}}
    (box :tooltip "CPU" ; {{{
      (hover-double :var revealcpu
                    :varname "revealcpu"
        (scale :min 0
               :max 101
               :value {EWW_CPU.avg})
        (label :text "${round(EWW_CPU.avg, 0)}%")
        (label :text "﬙"))) ; }}}
    (box :tooltip "Disk" ; {{{
      (hover-left :var revealdisk
                  :varname "revealdisk"
        (scale :min 0
               :max 101
               :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)})
        (label :text "💿"))) ; }}}
    (box :tooltip "Battery" ; {{{
      (hover-left :var revealbat
                  :varname "revealbat"
        (scale :min 0
               :max 101
               :value battery)
        (button :onclick "power-man"
          (label :text "")))) ; }}}
    (box :tooltip "Volume" ; {{{
      (hover-left :var revealvol
                  :varname "revealvol"
        (scale :min 0
               :max 101
               :value volume
               :onchange "amixer -D pulse sset Master {}%"
               :class "adjustable")
        (button :onclick "amixer -D pulse set Master 1+ toggle"
          (label :text mutestatus)))) ; }}}
    ; (box :tooltip "Power" ; {{{
    ;   (click-left :var revealpower
    ;               :varname "revealpower"
    ;     (box
    ;       (button :onclick "notify-send asd" "asd"))
    ;     (label :text "⏻"))) ; }}}
    (box :class "spaced" ; {{{
      (eventbox
        (hover-double :var revealtime
                      :varname "revealtime"
                      :class "condensed"
          (label :text "${date}-"
                 :style "padding: 0;")
          (label :text ":${seconds}"
                 :style "padding: 0;")
          (label :class "nobox"
                 :text time)))))) ; }}}
; }}}

(defwidget click-left [var varname ?class ?duration ?transition] ; {{{
  (box :class "${class}"
       :orientation "h"
       :space-evenly false
    (eventbox :onhoverlost "${eww} update ${varname}=false"
      (button :onclick "${eww} update ${varname}=true"
        (box :space-evenly false
          (revealer :reveal var
                    :transition {transition ?: "slideleft"}
                    :duration {duration ?: "350ms"}
            (children :nth 0))
          (children :nth 1))))))
; }}}

(defwidget hover-left [var varname ?class ?duration ?transition] ; {{{
  (box :class "${class} hover"
       :orientation "h"
       :space-evenly false
    (eventbox :onhover "${eww} update ${varname}=true"
              :onhoverlost "${eww} update ${varname}=false"
      (box :space-evenly false
        (revealer :reveal var
                  :transition {transition ?: "slideleft"}
                  :duration {duration ?: "350ms"}
          (children :nth 0))
        (children :nth 1)))))
; }}}

(defwidget hover-right [var varname ?class ?duration ?transition] ; {{{
  (box :class "${class} hover"
       :orientation "h"
       :space-evenly false
    (eventbox :onhover "${eww} update ${varname}=true"
              :onhoverlost "${eww} update ${varname}=false"
      (box :space-evenly false
        (revealer :reveal var
                  :transition {transition ?: "slideright"}
                  :duration {duration ?: "350ms"}
          (children :nth 0))
        (children :nth 1)))))
; }}}

(defwidget hover-double [var varname ?class ?duration] ; {{{
  (box :class "${class} hover hover-double"
       :orientation "h"
       :space-evenly false
    (eventbox :onhover "${eww} update ${varname}=true"
              :onhoverlost "${eww} update ${varname}=false"
      (box :space-evenly false
        (revealer :reveal var
                  :transition "slideleft"
                  :duration {duration ?: "350ms"}
          (children :nth 0))
        (children :nth 2)
        (revealer :reveal var
                  :transition "slideright"
                  :duration {duration ?: "350ms"}
          (children :nth 1))))))
; }}}

(defwidget metric [label value ?onchange] ; {{{
  (box :orientation "h"
       :space-evenly false
    (box :class "label"
      label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))
; }}}

; Listeners / pollers {{{
(deflisten music :initial ""
  "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")

  ; https://askubuntu.com/a/523899
(defpoll title :initial ""
               :interval "250ms"
  "xdotool getactivewindow getwindowname | awk -v len=60 '{ if (length($0) > len) print substr($0, 1, len-1) \"…\"; else print; }'")

(defpoll volume :interval "1s"
  "amixer -D pulse sget Master | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%' | head -1")

(defpoll date :interval "30m"
  "date '+%a %b %d'")
(defpoll time :interval "10s"
  "date '+%H:%M'")
(defpoll seconds :interval "1s"
  "date '+%S'")

(defpoll battery :interval "5m"
  "power-man")

(defpoll mutestatus :interval "5s"
  "amixer get Master | tail -2 | grep -c '\\[on\\]' >/dev/null 2>&1 && printf  || printf  ")

;(defpoll ram :interval "25s"
;  "printf "%.0f\n" $(free -m | grep Mem | awk '{print ($3/$2)*100}')")
; }}}
