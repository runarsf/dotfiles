# Basic Settings
set previewer lfpreview
#set preview false
#set previewer ~/.config/lf/preview
set hidden true
#set color256 true
set drawbox true
set icons true
set ignorecase true
set ratios 1:2:3

map m
map o
map n
map "'"
map '"'
map d
map c
map e
map f

cmd open ${{
  case $(file --mime-type "${f}" -bL) in
    text/*|application/json) ${EDITOR} "${f}";;
    video/*|image/*/application/pdf) xdg-open "${f}" & disown;;
    *) xdg-open "${f}";;
  esac
}}
map <enter> open

cmd mkdir ${{
  printf "Directory name: "
  read dir
  mkdir "${dir}"
}}
map md mkdir

cmd mkfile ${{
  printf "File name: "
  read file
  touch "${file}"
  #${EDITOR} "${file}"
}}
map mf mkfile

cmd chmod ${{
  printf "Mode Bits: "
  read bits

  for file in "${fx}"; do
    chmod "${bits}" "${file}"
  done
}}
map ch. chmod

cmd chexec %chmod +x "${f}"
map chx chexec

cmd setbg %cp "${f}" ~/.config/wall.png && feh --bg-scale "${f}"
map bg setbg

cmd dragon %dragon-drag-and-drop -a -x $fx
map dr dragon

# Archive bindings
cmd unarchive ${{
  case "${f}" in
    *.zip) unzip "${f}";;
    *.tar.gz) tar -xzvf "${f}";;
    *.tar.bz2) tar -xjvf "${f}";;
    *.tar) tar -xvf "${f}";;
    *) printf "Unsupported format\n";;
  esac
}}
map au unarchive

cmd zip %zip -r "${f}" "${f}"
map az zip
cmd tar %tar cvf "${f}.tar" "${f}"
map at tar
cmd targz %tar cvzf "${f}.tar.gz" "${f}"
map ag targz
cmd tarbz2 %tar cjvf "${f}.tar.bz2" "${f}"
map ab tarbz2

cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while test "${files}"; do
    # extract the substring from start of string up to delimiter.
    # this is the first "element" of the string.
    file=${files%%;*}

    trash-put "$(basename "${file}")"
    # if there's only one element left, set `files` to an empty string.
    # this causes us to exit this `while` loop.
    # else, we delete the first "element" of the string from files, and move onto the next.
    if test "${files}" = "${file}"; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}
map dd trash

cmd trash-list $trash-list; read trash
map tl trash-list
map trash-empty %trash-empty
map tc trash-empty
cmd trash-restore $trash-restore "$(trash-list | fzf | cut -d' ' -f3)"
map tr trash-restore

map e $${EDITOR} "${f}"
map z $zathura "${f}" &

map sh set hidden!
#map dd delete
map p paste
map x cut
map y copy
map r rename
map H top
map L bottom
map R reload

map gg top
map G bottom

cmd mark-new ${{
    # querying mark
    read -e -p "Mark as: " -n 1 markchar
    markfile="${XDG_CONFIG_HOME:-${HOME}/.config}/lf/marks"
    # removing old mark if present
    sed -i "/^${markchar} .*/d" "${markfile}"
    # adding new mark
    { cat "${markfile}" 2>/dev/null;
      echo "${markchar}" "$(pwd)";
    } | sort > "${markfile}.tmp"
    mv -f "${markfile}.tmp" "${markfile}"
}}
map m mark-new

cmd mark-cd ${{
    # loading and presenting
    markfile="${XDG_CONFIG_HOME:-${HOME}/.config}/lf/marks"
    echo "Current marks:"
    cat "${markfile}" 2>/dev/null
    # querying mark
    read -e -p "Go to mark: " -n 1 markchar
    dir=$(grep -e "^${markchar}" < "${markfile}" | cut -d' ' -f2)
    # setting last visited dir
    sed -i "/^' .*$/d" "${markfile}"
    echo "' $(pwd)" >> "${markfile}"
    # going to wanted dir
    test -n "${dir}" && lf -remote "send ${id} cd ${dir}"
}}
map "'" mark-cd

map gtr cd ~/.local/share/Trash/files
map gp cd ~/Pictures
map gb cd ~/.local/bin
map gdl cd ~/Downloads
map gd. cd ~/data
map gdc cd ~/Documents
map gdr cd ~/Documents/drive
map gc cd ~/.config
