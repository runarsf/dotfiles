# vim: set syntax=python foldmethod=indent:
import os
from shutil import which

if which('zsh') is not None:
    source-foreign zsh --overwrite-aliases --interactive True --sourcer source 'echo loading xonsh foreign shell'

path = lambda *arg: os.path.realpath(os.path.join(*arg))

$XONSH_COLOR_STYLE = 'monokai'

$FOREIGN_ALIASES_SUPPRESS_SKIP_MESSAGE = True

$PROMPT_TOOLKIT_COLOR_DEPTH = 'DEPTH_24_BIT'
$XONSH_SHOW_TRACEBACK = True
$COMPLETIONS_DISPLAY = 'single'
$HISTCONTROL = 'ignoredups,erasedups'
$ENABLE_ASYNC_PROMPT = True
$VC_BRANCH_TIMEOUT = .2
$NPM_PACKAGES = path($HOME, '/.npm')
$PYENV_ROOT = path($HOME, '/.pyenv')

$AUTO_CD = True
$AUTO_PUSHD = True
$CASE_SENSITIVE_COMPLETIONS = False
$DYNAMIC_CWD_ELISION_CHAR = '…'
$AUTO_SUGGEST = True
$AUTO_SUGGEST_IN_COMPLETIONS = True
$COMPLETIONS_CONFIRM = True
$XONSH_AUTOPAIR = True

$XONSH_HISTORY_SIZE = (1073741824, 'commands')
$GOPATH = path($HOME, '/go/bin')

$EDITOR = 'nvim'


aliases['-'] = ['cd', '-']
aliases['ls'] = ['ls', '-l', '-A', '-F', '-h']
if $(ls --version 2>/dev/null).strip():
    aliases['ls'].append('--color=auto')
aliases['grep'] = 'grep --color'
aliases['c'] = 'xclip -selection clipboard'
aliases['vim'] = $EDITOR

# '/usr/local/bin/bash-completion/'
$BASH_COMPLETIONS.insert(0, '/usr/local/share/bash-completion/bash_completion/')

# Add paths that aren't already in PATH
for pdir in reversed([
        path($HOME, '/.local/bin'),
        path($HOME, '/.cargo/bin'),
        path($GOPATH[0], '/bin'),
        path($NPM_PACKAGES, '/bin'),
        path($PYENV_ROOT, '/bin'),
        '/opt/X11/bin',
        '/usr/local/bin',
        '/usr/local/sbin',
    ]):
    if pdir not in $PATH:
        $PATH.insert(0, pdir)

$(xontrib load @([
    'coreutils',
    'docker_tabcomplete',
    'mpl',
    'apt_tabcomplete',
    'prompt_ret_code',
    'fzf-widgets',
    'abbrevs',
    'argcomplete',
    'pipeliner',
    'sh',
    'zoxide',
    'readable-traceback',
    # 'distributed',
    # 'bashisms',
]))

# https://xon.sh/tutorial.html#customizing-the-prompt
$PROMPT_FIELDS['prompt_end'] = '{WHITE}@' if $PROMPT_FIELDS['prompt_end'] == '$' else '{WHITE}#' # '🐚'
$PROMPT_FIELDS['uname'] = $USER[:1]
$PROMPT_FIELDS['hname'] = $HOSTNAME[:1]
$PROMPT = '{0}{1}'.format('{RESET}'.join([
    '{WHITE}{env_name}',
    '{#CB241E}[',
    '{#D99824}{uname}{#989718}@{#42858B}{hname}', # '{BOLD_GREEN}{user}@{hostname}',
    ' {#B26287}{short_cwd}',
    '{#CB241E}]',
    '{branch_color}{curr_branch:[{}]}',
    '{BOLD_BLUE}{ret_code_color}{ret_code}',
    '{prompt_end} ',
]), '{RESET}')

# Inherited from zsh
# aliases['dk']   = abbrevs['dk']   = 'docker'
# aliases['dkps'] = abbrevs['dkps'] = 'docker ps'
# aliases['dkc']  = abbrevs['dkc']  = 'docker-compose'
# aliases['dkcl'] = abbrevs['dkcl'] = 'docker-compose logs'
# aliases['dkcL'] = abbrevs['dkcL'] = 'docker-compose logs -f'

if (os.path.isfile('/usr/bin/security') and
    !(ssh-add -lq a> /dev/null).returncode == 1):
    ssh-add -K

def _x11docker(args, stdin=None, stdout=None, stderr=None):
    xhost +
    docker run -e DISPLAY=host.docker.internal:0 @(args)
    xhost -
    return 0

aliases['x11docker'] = _x11docker

$fzf_history_binding = "c-r"
$FZF_DEFAULT_COMMAND="fd --type file --color=always --follow --hidden --exclude .git --exclude .hg --exclude node_modules"
$FZF_DEFAULT_OPTS="--color 'bg:0,bg+:2,fg:8,fg+:15,hl:10,hl+:11,prompt:11,info:3,marker:11,pointer:11,spinner:1' --ansi --height 10"

# sudo askpass for non SSH sessions
#if 'SSH_CLIENT' not in ${...}:
#  aliases['sudo'] = 'sudo -A'
#  $SUDO_ASKPASS = '/home/dyuri/bin/askpass-rofi'
#  $SSH_ASKPASS = '/home/dyuri/bin/askpass-rofi'

# json
try:
    import __builtin__
except ImportError:
    import builtins as __builtin__
__builtin__.true = True
__builtin__.false = False
__builtin__.null = None

def _git_bare(git_dir, work_tree, *args):
    if not args:
        args = ('status')
    git --git-dir=@(git_dir) --work-tree=@(work_tree) @(args)

aliases['dotfiles'] = lambda args: _git_bare($DOTBARE_DIR, $DOTBARE_TREE, *args)
aliases['doutline'] = lambda args: _git_bare($DOCKER_BARE, $DOCKER_TREE, *args)
