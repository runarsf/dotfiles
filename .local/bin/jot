#!/usr/bin/env bash
#[cd] FIXME: Automatically cd
# maybe export CHANGEDIR="${DIR}"
# maybe PWD="${DIR}"
replaceShell () {
#  source "${0}"
  if grep -q "^LASTDIR=.*$" "${HOME:-~}/.config/.jotrc"; then 
        sed -i 's/string/newstring/' file
      else
            echo "newstring" >> file
  fi
}

#[cd]
# Check if script is sourced
#if [[ $_ != $0 ]]; then
#  if test -n "${CHANGEDIR}"; then
#    cd "${CHANGEDIR}"
#    export CHANGEDIR=""
#  fi
#  # Replace current shell (this script, since it's sourced) with a new one with the updated path
#  exec "${SHELL:-bash}"
#fi

set -o errexit

set -o allexport
test -f "${HOME:-~}/.config/.jotrc" && source "${HOME:-}/.config/.jotrc"
set +o allexport

# Change these in ~/.config/.jotrc
NOTE_EXTENSION="${NOTE_EXTENSION:-.md}"
DIR="${DIR:-${HOME:-~}/Documents/drive/notes}"
FZF_BIN="${FZF_BIN:-$(which fzf)}"
SYNC_SERVICE="${SYNC_SERVICE:-}"

DIR="$(realpath "${DIR}")"
#[cd]
#cd "${DIR}"
#export CHANGEDIR="${DIR}"
# No reason to trap before doing anything with the shell
#trap replaceShell EXIT

if test "${SYNC_SERVICE}" = "insync"; then
  if command -v "insync" >/dev/null 2>&1; then
    if test -z "$(pidof insync)"; then
      printf "Insync not running, starting...\n"
      insync start
      if test "${?}" -ne "0"; then
        printf "Failed to start insync"
        exit 1
      fi
    fi
  fi
fi

# TODO: Only show files matching pattern (.*\.${NOTE_EXTENSION})

make_selection () {
  DIR="${1}"
  ONLY_NOTES="${2:-}"

  OPTIONS="$(\ls -p "${DIR}")"
  # Add a newline if there are any notes, to avoid empty lines in fzf
  if test -n "${OPTIONS}"; then
    #while IFS= read -r option; do
    #done <<< "${OPTIONS}"
    OPTIONS="${OPTIONS}\n"
  fi
  if test -z "${ONLY_NOTES}"; then
    OPTIONS="${OPTIONS}..\nNew Note\nNew Folder\nDelete Item"
  fi

  SELECTED_OPTION="$(printf "${OPTIONS}" | "${FZF_BIN}" --info=hidden)"
}

# Note: $DIR is updated in make_selection()
while true; do
  make_selection "${DIR}"
  if test "${SELECTED_OPTION}" = "New Note"; then
    NOTE_NAME="$(set +e; printf '' | "${FZF_BIN}" --print-query --info=hidden --prompt 'New note name: '; set -e)"
    if test -z "${NOTE_NAME// }"; then
      printf "Please provide a note name...\n"
      continue
    fi
    if [[ "${NOTE_NAME}" == *. ]]; then
      NOTE="${DIR}/${NOTE_NAME%?}"
    elif [[ "${NOTE_NAME}" == *.* ]]; then
      NOTE="${DIR}/${NOTE_NAME}"
    else
      NOTE="${DIR}/${NOTE_NAME}${NOTE_EXTENSION}"
    fi
    if test -f "${NOTE}"; then
      printf "Note with the name already exists...\n"
      continue
    fi
    touch "${NOTE}"
    "${EDITOR}" "${NOTE}"
  elif test "${SELECTED_OPTION}" = "New Folder"; then
    FOLDER_NAME="$(set +e; printf '' | "${FZF_BIN}" --print-query --info=hidden --prompt 'New folder name: '; set -e)"
    if test -z "${FOLDER_NAME// }"; then
      printf "Please provide a folder name...\n"
      continue
    fi
    mkdir -p "${DIR}/${FOLDER_NAME}"
    DIR="${DIR}/${FOLDER_NAME}"
  elif test "${SELECTED_OPTION}" = ".."; then
    DIR="$(dirname "${DIR}")"
    #[cd]#cd "${DIR}"
  elif test -d "${DIR}/${SELECTED_OPTION}"; then
    DIR="${DIR}/${SELECTED_OPTION}"
    #[cd]#cd "${DIR}"
  elif test -f "${DIR}/${SELECTED_OPTION}"; then
    "${EDITOR:-vim}" "${DIR}/${SELECTED_OPTION}"
  elif test "${SELECTED_OPTION}" = "Delete Item"; then
    make_selection "${DIR}" "yes"
    if test -d "${DIR}/${SELECTED_OPTION}" -o -f "${DIR}/${SELECTED_OPTION}"; then
      DELETE_ACCEPT="$(printf "Yes\nNo" | "${FZF_BIN}" --info=hidden --prompt="Delete ${SELECTED_OPTION}? (${DIR}/${SELECTED_OPTION})")"
      if test "${DELETE_ACCEPT}" = "Yes"; then
        rm -rf "${DIR}/${SELECTED_OPTION}"
      fi
    fi
  else
    printf "Something went wrong...\n"
    printf "Selected option: ${SELECTED_OPTION}\n"
    printf "Directory: ${DIR}\n"
    break
  fi
done
