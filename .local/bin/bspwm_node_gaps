#!/bin/sh
default_gaps () {
  WINDOW_GAP="$(sed --quiet 's/^bspc config window_gap \([0-9]\+\)$/\1/p' ${XDG_CONFIG_HOME:-${HOME}/.config}/bspwm/bspwmrc)"
  test -z "${WINDOW_GAP}" && WINDOW_GAP=15
  TOP_PADDING="$(sed --quiet 's/^bspc config top_padding \([0-9]\+\)$/\1/p' ${XDG_CONFIG_HOME:-${HOME}/.config}/bspwm/bspwmrc)"
  test -z "${TOP_PADDING}" && TOP_PADDING=0
  BOTTOM_PADDING="$(sed --quiet 's/^bspc config bottom_padding \([0-9]\+\)$/\1/p' ${XDG_CONFIG_HOME:-${HOME}/.config}/bspwm/bspwmrc)"
  test -z "${BOTTOM_PADDING}" && BOTTOM_PADDING=0
  LEFT_PADDING="$(sed --quiet 's/^bspc config left_padding \([0-9]\+\)$/\1/p' ${XDG_CONFIG_HOME:-${HOME}/.config}/bspwm/bspwmrc)"
  test -z "${LEFT_PADDING}" && LEFT_PADDING=0
  RIGHT_PADDING="$(sed --quiet 's/^bspc config right_padding \([0-9]\+\)$/\1/p' ${XDG_CONFIG_HOME:-${HOME}/.config}/bspwm/bspwmrc)"
  test -z "${RIGHT_PADDING}" && RIGHT_PADDING=0
}
default_gaps

remove_gaps () {
  test "${WINDOW_GAP:-0}"     -gt "0" && bspc config window_gap     0
  test "${TOP_PADDING:-0}"    -gt "0" && bspc config top_padding    0
  test "${BOTTOM_PADDING:-0}" -gt "0" && bspc config bottom_padding 0
  test "${LEFT_PADDING:-0}"   -gt "0" && bspc config left_padding   0
  test "${RIGHT_PADDING:-0}"  -gt "0" && bspc config right_padding  0
}

restore_gaps () {
  bspc config window_gap     "${WINDOW_GAP}"
  bspc config top_padding    "${TOP_PADDING}"
  bspc config bottom_padding "${BOTTOM_PADDING}"
  bspc config left_padding   "${LEFT_PADDING}"
  bspc config right_padding  "${RIGHT_PADDING}"
  #bspc config border_width 3
}

#remove_gaps
restore_gaps
exit
HideNodes() {
  for node in $1; do
    bspc node "$node" -g hidden=on
  done
}

HideTiled() {
  Nodes=$(bspc query -N -n .tiled -d "$1")
  HideNodes "$Nodes"
}

ShowNodes() {
  Nodes=$(bspc query -N -n .hidden -d "$1")

  for node in $Nodes; do
    bspc node "$node" -g hidden=off
  done
}

bspc subscribe node_state | while read -r Event Monitor Desktop Node State Active
do
  PrimaryMonitor=$(bspc query -M -m primary)
  # Hide bar and nodes when node becomes fullscreen, otherwise show
  if [ "$State" = "fullscreen" ] && [ "$Active" = "on" ]; then
    # Only consider nodes on primary monitor
    if [ "$PrimaryMonitor" = "$Monitor" ]; then
      HideBar
    fi
      HideTiled "$Desktop"
  else
    if [ "$PrimaryMonitor" = "$Monitor" ]; then
      ShowBar
    fi
    ShowNodes "$Desktop"
  fi
done &

bspc subscribe node_remove | while read Event Monitor Desktop Node
do
  PrimaryMonitor="$(bspc query -M -m primary)"

  # Show bar if no nodes are fullscreen on current desktop
  if [ "$Monitor" = "$PrimaryMonitor" ] && \
    [ -z "$(bspc query -N -n .fullscreen -d "$Desktop")" ]; then
    ShowBar
  fi
  ShowNodes "$Desktop"
done &

bspc subscribe node_transfer | while read -r Event SrcMonitor SrcDesktop SrcNode DestMonitor Dest Desktop DestNode
do
  # Show nodes on src desktop and hide nodes on dest desktop
  # If src node is in full screen mode
  if [ -n "$(bspc query -N -n "$SrcNode".fullscreen)" ]; then
    ShowNodes "$SrcDesktop"
    HideTiled "$DestDesktop"
    ShowBar
  fi

  # Hide any fullscreen nodes on destination desktop
  FullscreenDest=$(bspc query -N -n .fullscreen -d "$DestDesktop" \
    | sed "/$SrcNode/d")
  if [ -n "$FullscreenDest" ]; then
    HideNodes "$FullscreenDest"
  fi
done &

bspc subscribe desktop_focus | while read -r Event Monitor Desktop
do
  PrimaryMonitor="$(bspc query -M -m primary)"
  FullscreenNode="$(bspc query -N -n .fullscreen -d "$Desktop")"

  # Only consider nodes on primary monitor
  if [ "$PrimaryMonitor" = "$Monitor" ]; then
    # Hide bar if desktop contains fullscreen node
    if [ -n "$FullscreenNode" ]; then
      HideBar
    # Otherwise show the bar
    else
      ShowBar
    fi
  fi
done &
