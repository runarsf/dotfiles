#!/usr/bin/env bash
# https://trello.com/b/QwNLllss/cmds
set -o errexit

# Argument parsing {{{
positional=()
while test "${#}" -gt "0"; do
  case "${1}" in
    -q|--query)
      query="${2}"
      shift;shift;;
    -d|--defaults)
      default_commands=': Edit ${__type} commands file. ; ${EDITOR:-vim} ${__file}\n'
      shift;;
    -t|--text)
      OUTPUT_AS_TEXT="true"
      shift;;
    -s|--silent)
      SILENT="true"
      shift;;
    --*)
      printf "Unknown option: ${1}\n"
      exit 1
      shift;;
    -*)
      shopts="${1}"
      if test "${#shopts}" -le "2"; then
        printf "Unknown option: ${shopts}\n"
        exit 2
      fi
      shift
      set -- "${shopts:0:2}" "-${shopts:2}" "${@}"
      ;;
    *)
      positional+=("${1}")
      shift;;
  esac
done

set -- "${positional[@]}"

if test "${#}" -gt "0"; then
  test -n "${SILENT}" || printf "Commands file(s): ${*}\n"
  # No support for multiple files (yet)
  COMMANDS_FILE="${1}"
fi
# }}}

# Select commands file {{{
if test -n "${COMMANDS_FILE}" -a -f "${COMMANDS_FILE}"; then
  __type="environment"
  __file="${COMMANDS_FILE}"
elif test -f 'commands'; then
  __type="local"
  __file="./commands"
elif (test -d '.git' || git rev-parse --is-inside-work-tree > /dev/null 2>&1) \
 && test -f "$(find -L -type f -name 'commands' 2> >(grep -v 'Permission denied' >&2))"; then
  __type="local git"
  __file="$(printf $(find -L -type f -name 'commands' 2> >(grep -v 'Permission denied' >&2)))"
elif test -f "${HOME}/.config/commands"; then
  __type="global"
  __file="${HOME}/.config/commands"
elif test -f "${HOME}/.commands"; then
  __type="global"
  __file="${HOME}/.commands"
else
  printf "No commands file found.\n"
  exit 1
fi
# }}}

export __file="$(realpath ${__file})"
export __path="$(dirname "${__file}")"
commands="$(cat ${__file})"

# Check to see if a pipe exists on stdin. {{{
if test -p /dev/stdin; then
  #while IFS= read line; do
  #        echo "Line: ${line}"
  #done
  # TODO: 
  commands="$(cat)"
fi
# }}}

# Select command {{{
cmd=$(\
  printf "${default_commands}${commands[@]}" \
| awk '{$1=$1};1' \
| fzf --select-1 --exit-0 --query="${query}"
)
# }}}

test -n "${SILENT}" || printf "$ ${cmd}\n\n"

# Replace all <index> with user input {{{
while true; do
  # Check if anything left to replace
  [[ ${cmd} == *"<"*">"* ]] || break
  # Get the content of the first occurence of <this>
  index="$(echo $cmd | awk -F[\<\>] '{print $2}')"
  # Get substitution for <this>
  read -p "${index}> " subst
  test -z "${subst}" && subst="${index}"
  # Replace all occurences of <this>
  # Don't replace all when only <>
  #if [[ $b =~ "^.*<.*\S.*>.*$" ]]; then
    cmd="$(sed -E "s|(<${index}>)|${subst}|g" <<< ${cmd})"
  #else
  #  cmd="$(sed -E "s|(<${index}>)|${subst}|" <<< ${cmd})"
  #fi
done
# }}}

# Utilize selected command command {{{
#printf "${cmd}" | bash
if test -n "${OUTPUT_AS_TEXT}"; then
  cmd="$(envsubst <<<${cmd})"
  printf "${cmd}"
else
  eval "${cmd}"
fi
# }}}
