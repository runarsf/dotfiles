#!/usr/bin/env bash
set -euo pipefail

colours () { # {{{
  RESET=$'\e[0;39m'

  E_BOLD=$'\e[1m'
  E_DIM=$'\e[2m'
  E_UNDERLINE=$'\e[4m'
  E_BLINK=$'\e[5m'
  E_INVERT=$'\e[7m'
  E_HIDDEN=$'\e[8m'

  R_NORMAL=$'\e[0m'
  R_BOLD=$'\e[21m'
  R_DIM=$'\e[22m'
  R_UNDERLINE=$'\e[24m'
  R_BLINK=$'\e[25m'
  R_INVERT=$'\e[27m'
  R_HIDDEN=$'\e[28m'

  C_DEFAULT=$'\e[19m'
  C_BLACK=$'\e[30m'
  C_RED=$'\e[31m'
  C_GREEN=$'\e[32m'
  C_YELLOW=$'\e[33m'
  C_BLUE=$'\e[34m'
  C_MAGENTA=$'\e[35m'
  C_CYAN=$'\e[36m'
  C_LGRAY=$'\e[37m'
  C_DGRAY=$'\e[90m'
  C_LRED=$'\e[91m'
  C_LGREEN=$'\e[92m'
  C_LYELLOW=$'\e[93m'
  C_LBLUE=$'\e[94m'
  C_LMAGENTA=$'\e[95m'
  C_LCYAN=$'\e[96m'
  C_WHITE=$'\e[97m'

  B_DEFAULT=$'\e[49m'
  B_BLACK=$'\e[40m'
  B_RED=$'\e[41m'
  B_GREEN=$'\e[42m'
  B_YELLOW=$'\e[43m'
  B_BLUE=$'\e[44m'
  B_MAGENTA=$'\e[45m'
  B_CYAN=$'\e[46m'
  B_LGRAY=$'\e[47m'
  B_DGRAY=$'\e[100m'
  B_LRED=$'\e[101m'
  B_LGREEN=$'\e[102m'
  B_LYELLOW=$'\e[103m'
  B_LBLUE=$'\e[104m'
  B_LMAGENTA=$'\e[105m'
  B_LCYAN=$'\e[106m'
  B_WHITE=$'\e[106m'
}
colours
# }}}

usage () { # {{{
	cat <<-EOMAN
	${RESET}${C_GREEN}Usage:${RESET} $(basename $(realpath ${0}))  <${C_RED}options${RESET} [${C_YELLOW}arguments${RESET}]>  [${C_BLUE}path${RESET}]
	
	A script for easyily encrypting/decrypting a file or directory.
	Directories will be tar'ed prior to encryption.
	The default action is detected based on what kind of file the vault is.
	Simply running \`vault\` should do the job most of the time.
	
	${C_GREEN}Options:${RESET}
	  -h, --help        Display usage menu.
    -y, --yes         Don't prompt for confirmation (not yet implemented).
	  ${C_DGRAY}The following actions will attempt to stupidly run the function regardless of filetype, use with caution.${RESET}
	    -a, --archive     Archive the vault.
	    -u, --unarchive   Unarchive the vault.
	    -e, --encrypt     Encrypt the vault.
	    -d, --decrypt     Decrypt the vault.
	
	${C_GREEN}Path:${RESET}
	  The file or directory to operate on, default paths (in order of priority):
	    1.  ./vault
	    2.  ./.vault
	    3.  \${HOME:-~}/.vault
	    4.  \${XDG_CONFIG_HOME:-\${HOME:-~}/.config}/.vault
	${RESET}
	EOMAN
} # }}}

# Argument parsing {{{
ACTION=""
positional=()
while test "${#}" -gt "0"; do
  case "${1}" in
    -h|--help) # {{{
      usage
      exit 0
      shift;; # }}}
    -a|--archive) # {{{
      ACTION="archive"
      shift;; # }}}
    -u|--unarchive) # {{{
      ACTION="unarchive"
      shift;; # }}}
    -e|--encrypt) # {{{
      ACTION="encrypt"
      shift;; # }}}
    -d|--decrypt) # {{{
      ACTION="decrypt"
      shift;; # }}}
    -y|--yes) # {{{
      shift;; # }}}
    --*) # {{{
      printf "Unknown option: ${1}\n"
      exit 1
      shift;;
    -*)
      shopts="${1}"
      if test "${#shopts}" -le "2"; then
        printf "Unknown option: ${shopts}\n"
        exit 2
      fi
      shift
      set -- "${shopts:0:2}" "-${shopts:2}" "${@}"
      ;;
    *)
      positional+=("${1}")
      shift;; # }}}
  esac
done
set -- "${positional[@]}"

if test "${#}" -lt "1"; then
  test -e "${XDG_CONFIG_HOME:-${HOME:-~}/.config}/.vault" && VAULT="${XDG_CONFIG_HOME:-${HOME:-~}/.config}/.vault"
  test -e "${HOME:-~}/.vault" && VAULT="${HOME:-~}/.vault"
  test -e "./.vault" && VAULT="./.vault"
  test -e "./vault" && VAULT="./vault"
  set -- "${VAULT}"
fi
# }}}

check_deps () { # <dependencies:@string> -> Void {{{
  _deps=${@}
  _missing=""
  for _dep in ${_deps}; do
    if ! hash "${_dep}" 2>/dev/null; then
      _missing="${_missing} ${_dep}"
    fi
  done
  if test -n "${_missing}"; then
    printf "Missing required dependencies:${_missing}\n"
    exit 1
  fi
}

check_deps md5sum gpg
# }}}

prompt () { # -> Boolean {{{
  printf "${1} [y/N]"
  read -p " " -n 1 -r </dev/tty
  printf "\n"
  if [[ ! "${REPLY}" =~ ^[Yy]$ ]]; then
    return 1
  fi
}
# }}}

archive () { # -> Boolean {{{
  # TODO readlink -f?
  local INPUT="$(realpath "${1}")" # directory
  printf "Archiving ${INPUT}...\n"
  # TODO Match checksums
  # tar -cvpzf "${VAULT_ARCHIVE}" "${VAULT}" \
  #   | xargs -I '{}' sh -c "test -f '{}' && md5sum '{}'" \
  #   | tee "${VAULT_CHECKSUMS}"

  local TMP="$(mktemp "/tmp/vault-XXXXXX.tar.gz")"
  exec 3> "${TMP}"
  exec 4< "${TMP}"
  rm "${TMP}"

  # --gzip vs. --verify
  tar --create \
      --verbose \
      --gzip \
      --preserve-permissions \
      --directory "$(realpath "${INPUT}")" \
      --file - \
      . \
      >&3
      # "$(basename "$(realpath "${INPUT}")")" \
      # --absolute-names \

  rm -rf "${INPUT}"

  cat <&4 > "${INPUT}"
  # TODO Close file descriptor manually?
} # }}}

unarchive () { # -> Boolean {{{
  local INPUT="${1}"
  printf "Unarchiving ${INPUT}...\n"

  local TMP="$(mktemp "/tmp/vault-XXXXXX.tar.gz")"
  exec 3> "${TMP}"
  exec 4< "${TMP}"
  rm "${TMP}"

  # "mv" INPUT to TMP_ARCHIVE
  >&3 cat "${INPUT}" # cat "${INPUT}" >&3
  # cat <&4

  # This is dangerous, if the next tar command fails
  rm -f "${INPUT}"

  mkdir "${INPUT}"

  tar --extract \
      --verbose \
      --gzip \
      --file - \
      --directory "${INPUT}" \
      <&4
      # --directory "$(dirname "$(realpath "${INPUT}")")" \
      # --one-top-level \ # --strip-components 1 \
} # }}}

encrypt () { # -> Void {{{
  local INPUT="${1}"
  # local OUTPUT="${2}"
  printf "NB! There is no way to recover encrypted data if you forget the encryption phrase!\n"
  # TODO If you CTRL-C the file will still be archived
  read -p "Enter encryption password > " -s PASSWORD

  local TMP="$(mktemp "/tmp/vault-XXXXXX.gpg")"
  exec 3> "${TMP}"
  exec 4< "${TMP}"
  rm "${TMP}"

  # aescrypt -e -p "${password}" "${vaultfile}" -o "${cryptofile}"
  gpg --symmetric \
      --yes \
      --batch \
      --cipher-algo aes256 \
      --passphrase "${PASSWORD}" \
      --output - \
      "${INPUT}" \
      >&3
      #--pinentry-mode loopback \

  rm -f "${INPUT}"

  cat <&4 > "${INPUT}"
} # }}}

decrypt () { # -> Void {{{
  # aescrypt -d -p "${password}" "${cryptofile}" -o "${vaultfile}"
  local INPUT="${1}"
  read -p "Enter encryption password > " -s PASSWORD

  local TMP="$(mktemp "/tmp/vault-XXXXXX.gpg")"
  exec 3> "${TMP}"
  exec 4< "${TMP}"
  rm "${TMP}"

  gpg --decrypt \
      --yes \
      --batch \
      --cipher-algo aes256 \
      --passphrase "${PASSWORD}" \
      --output - \
      "${INPUT}" \
      >&3
      #--pinentry-mode loopback \

  rm -f "${INPUT}"

  cat <&4 > "${INPUT}"
} # }}}

main () { # -> Void {{{
  local VAULT="$(realpath "${@}")" # The unencrypted vault, file or directory.

  if test ! -e "${VAULT}"; then
    printf "File/directory doesn't exist ${VAULT}, aborting...\n"
    exit 1
  fi

  # https://stackoverflow.com/a/49197786
  if file "${VAULT}" | awk -F ': ' '{print $NF}' | grep "GPG symmetrically encrypted data (AES256 cipher)" >/dev/null 2>&1; then
    printf "Unencrypting ${VAULT}\n"

    decrypt "${VAULT}"

    if file "${VAULT}" | awk -F ': ' '{print $NF}' | grep "gzip compressed data" >/dev/null 2>&1; then
      unarchive "${VAULT}" || exit "${?}"
    fi
  else
    printf "Encrypting ${VAULT}...\n"

    if test -d "${VAULT}"; then
       archive "${VAULT}" || exit "${?}"
    fi

    encrypt "${VAULT}"
  fi
} # }}}

# Main loop {{{
while test "${#}" -gt "0"; do
  if test -z "${ACTION// }"; then
    main "${1}"
  else
    case "${ACTION}" in
      archive) archive "${1}";;
      unarchive) unarchive "${1}";;
      encrypt) encrypt "${1}";;
      decrypt) decrypt "${1}";;
    esac
  fi
  shift
done
# }}}

printf "Done!\n"

# TODO Ask for confirmation before doing operations on the path.
# TODO Safeguard in case something breaks during operations and only a file descriptor is open, no files.
