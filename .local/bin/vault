#!/usr/bin/env bash
set -euo pipefail

# Argument parsing {{{
# TODO Vault by default ~/.vault, ./vault if it exists
# VAULT="${HOME:-~}/.vault"
VAULT="./vault"
positional=()
while test "${#}" -gt "0"; do
  case "${1}" in
    --*) # {{{
      printf "Unknown option: ${1}\n"
      exit 1
      shift;;
    -*)
      shopts="${1}"
      if test "${#shopts}" -le "2"; then
        printf "Unknown option: ${shopts}\n"
        exit 2
      fi
      shift
      set -- "${shopts:0:2}" "-${shopts:2}" "${@}"
      ;;
    *)
      positional+=("${1}")
      shift;; # }}}
  esac
done
set -- "${positional[@]}"

if test "${#}" -gt "0"; then
  VAULT="${@}"
fi
# }}}

check_deps () { # <dependencies:@string> -> Void {{{
  _deps=${@}
  _missing=""
  for _dep in ${_deps}; do
    if ! hash "${_dep}" 2>/dev/null; then
      _missing="${_missing} ${_dep}"
    fi
  done
  if test -n "${_missing}"; then
    printf "Missing required dependencies:${_missing}\n"
    exit 1
  fi
}

check_deps md5sum gpg
# }}}

prompt () { # -> Boolean {{{
  printf "${1} [y/N]"
  read -p " " -n 1 -r </dev/tty
  printf "\n"
  if [[ ! "${REPLY}" =~ ^[Yy]$ ]]; then
    return 1
  fi
}
# }}}

archive () { # -> Boolean {{{
  # TODO readlink -f?
  local INPUT="$(realpath "${1}")" # directory
  printf "Archiving ${INPUT}...\n"
  # TODO Match checksums
  # tar -cvpzf "${VAULT_ARCHIVE}" "${VAULT}" \
  #   | xargs -I '{}' sh -c "test -f '{}' && md5sum '{}'" \
  #   | tee "${VAULT_CHECKSUMS}"

  local TMP="$(mktemp "/tmp/vault-XXXXXX.tar.gz")"
  exec 3> "${TMP}"
  exec 4< "${TMP}"
  rm "${TMP}"

  # --gzip vs. --verify
  tar --create \
      --verbose \
      --gzip \
      --preserve-permissions \
      --directory "$(realpath "${INPUT}")" \
      --file - \
      . \
      >&3
      # "$(basename "$(realpath "${INPUT}")")" \
      # --absolute-names \

  rm -rf "${INPUT}"

  cat <&4 > "${INPUT}"
  # TODO Close file descriptor manually?
} # }}}

unarchive () { # -> Boolean {{{
  local INPUT="${1}"
  printf "Unarchiving ${INPUT}...\n"

  local TMP="$(mktemp "/tmp/vault-XXXXXX.tar.gz")"
  exec 3> "${TMP}"
  exec 4< "${TMP}"
  rm "${TMP}"

  # "mv" INPUT to TMP_ARCHIVE
  >&3 cat "${INPUT}" # cat "${INPUT}" >&3
  # cat <&4

  # This is dangerous, if the next tar command fails
  rm -f "${INPUT}"

  mkdir "${INPUT}"

  tar --extract \
      --verbose \
      --gzip \
      --file - \
      --directory "${INPUT}" \
      <&4
      # --directory "$(dirname "$(realpath "${INPUT}")")" \
      # --one-top-level \ # --strip-components 1 \
} # }}}

encrypt () { # -> Void {{{
  local INPUT="${1}"
  # local OUTPUT="${2}"
  read -p "Enter encryption password > " -s PASSWORD

  local TMP="$(mktemp "/tmp/vault-XXXXXX.gpg")"
  exec 3> "${TMP}"
  exec 4< "${TMP}"
  rm "${TMP}"

  # aescrypt -e -p "${password}" "${vaultfile}" -o "${cryptofile}"
  gpg --symmetric \
      --yes \
      --batch \
      --cipher-algo aes256 \
      --passphrase "${PASSWORD}" \
      --output - \
      "${INPUT}" \
      >&3
      #--pinentry-mode loopback \

  rm -f "${INPUT}"

  cat <&4 > "${INPUT}"
} # }}}

decrypt () { # -> Void {{{
  # aescrypt -d -p "${password}" "${cryptofile}" -o "${vaultfile}"
  local INPUT="${1}"
  read -p "Enter encryption password > " -s PASSWORD

  local TMP="$(mktemp "/tmp/vault-XXXXXX.gpg")"
  exec 3> "${TMP}"
  exec 4< "${TMP}"
  rm "${TMP}"

  gpg --decrypt \
      --yes \
      --batch \
      --cipher-algo aes256 \
      --passphrase "${PASSWORD}" \
      --output - \
      "${INPUT}" \
      >&3
      #--pinentry-mode loopback \

  rm -f "${INPUT}"

  cat <&4 > "${INPUT}"
} # }}}

main () { # -> Void {{{
  local VAULT="$(realpath "${@}")" # The unencrypted vault, file or directory.

  # https://stackoverflow.com/a/49197786
  if file "${VAULT}" | awk -F ': ' '{print $NF}' | grep "GPG symmetrically encrypted data (AES256 cipher)" >/dev/null 2>&1; then
    printf "Unencrypting ${VAULT}\n"

    decrypt "${VAULT}"

    if file "${VAULT}" | awk -F ': ' '{print $NF}' | grep "gzip compressed data" >/dev/null 2>&1; then
      unarchive "${VAULT}" || exit "${?}"
    fi
  else
    printf "Encrypting ${VAULT}...\n"

    if test -d "${VAULT}"; then
       archive "${VAULT}" || exit "${?}"
    fi

    encrypt "${VAULT}"
  fi
} # }}}

main "${VAULT}"

printf "Done!\n"
