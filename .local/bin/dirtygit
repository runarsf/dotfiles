#!/usr/bin/env bash
# vim: set foldmethod=marker nomodeline:
# Options {{{
set -o errexit   # abort on nonzero exit status
set -o nounset   # abort on unbound variable
set -o pipefail  # don't hide errors within pipes
set -o noclobber # disallow redirect overwriting
# }}}

# Colours {{{
reset=$'\e[0;39m'
#red='\e[31m'
#green='\e[32m'
#blue='\e[94m'
#yellow='\e[33m'

gray=$'\e[90m'
red=$'\e[91m'
green=$'\e[92m'
yellow=$'\e[93m'
blue=$'\e[94m'
magenta=$'\e[95m'
cyan=$'\e[96m'

bGray=$'\e[100m'
bRed=$'\e[101m'
bGreen=$'\e[102m'
bYellow=$'\e[103m'
bBlue=$'\e[104m'
bMagenta=$'\e[105m'
bCyan=$'\e[106m'
# }}}

cleanup () { # {{{
  tput cnorm
  printf "${reset}"
  exit 2
}
trap cleanup INT
# }}}

waiting_dots () { # {{{
  local d='0.35'
  local i='.'
  tput civis
  printf "\r${green}${i}${i}${i}"
  sleep "${d}"
  printf "\r${yellow}${i}${i} "
  printf "\r${i}${i}"
  sleep "${d}"
  printf "\r${red}${i} "
  printf "\r${i}"
  sleep "${d}"
  printf "\r${reset} "
  printf "\r"
  sleep "${d}"
  tput cnorm
} # }}}

usage () { # {{{
	cat <<-EOMAN
	${green}Usage:${reset} ${blue}dirtygit${reset} ${gray}[${red}options${gray}] [${red}command${gray}]${reset}

	${green}Options:${reset}
	  -h${gray},${reset} --help          Display this message.
	  -y${gray},${reset} --yes           Don't prompt for confirmation.
	  -n${gray},${reset} --noop          Don't perform any git actions.
	  --git-dir    ${gray}<${red}dir${gray}>${reset}  Git-repo-files directory, see: \`man git\`.
	  --work-tree  ${gray}<${red}dir${gray}>${reset}  Git work tree, see: \`man git\`.
	  --git-add    ${gray}<${red}str${gray}>${reset}  What to send to \`git add\`, default: '.'.

	${green}Commands:${reset}
	  Commit message      Commit message used with git, default: \`date +'%a-%Y-%m-%dT%T%z'\`.

	${green}Examples:${yellow}
	  dirtygit
	  dirtygit -y
	  dirtygit -nyy
	  dirtygit Initial commit
	  dirtygit --git-dir "\${HOME}/dotfiles" --work-tree "\${HOME}" --git-add '-u'

	${green}Git flow:${reset}

    ${magenta}Add${gray} > ${magenta}Commit${gray} > ${magenta}Pull${gray} | ${magenta}Merge${gray} | ${magenta}Push${reset}
	${reset}
	EOMAN
} # }}}

confirm () { # {{{
  msg="${1:-Continue?}"
  printf "${msg} [Y/n]"
  read -p " " -n 1 -r </dev/tty
  printf "\n"
  if [[ "${REPLY}" =~ ^[Nn]$ ]]; then
    exit 3
  fi
} # }}}

commit () { # {{{
  accept () { # {{{
    if test "${yes}" -eq "0"; then
      confirm
    elif test "${yes}" -eq "1"; then
      waiting_dots
    fi
  } # }}}

  printf "\n${blue}| ADDING ${reset}\n\n"
  printf "\$ ${yellow}${gitCommand[*]} ${red}add ${gitAdd}${reset}\n"
  accept
  eval "${gitCommand[*]} add ${gitAdd}"

  printf "\n${blue}| COMMITTING ${reset}'${*}'\n\n"
  printf "\$ ${yellow}${gitCommand[*]} ${red}commit -m '${*}'${reset}\n"
  accept
  eval "${gitCommand[*]} commit -m '${*}'"

  printf "\n${blue}| PULLING ${reset}\n\n"
  printf "\$ ${yellow}${gitCommand[*]} ${red}pull${reset}\n"
  accept
  eval "${gitCommand[*]} pull"

  printf "\n${blue}| PUSHING ${reset}\n\n"
  printf "\$ ${yellow}${gitCommand[*]} ${red}push${reset}\n"
  accept
  eval "${gitCommand[*]} push"

  printf "\n${green}| DONE!${reset}\n\n"
  eval "${gitCommand[*]} status"
} # }}}

yes=0
gitAdd='.'
#defaultArgs=()
positional=()
gitCommand=("git")

#configPaths=(
#  "${HOME}/.config/.dirtygitrc"
#  "${HOME}/.dirtygitrc"
#  #"./.dirtygitrc"
#)
#for cfg in "${configPaths[@]}"; do
#  if test -f "${cfg}"; then
#    export "$(grep -v '^#' ${cfg} | xargs)"
#  fi
#done
#
#set -- "${defaultArgs[@]} ${@}"

# Arguments {{{
while test "${#}" -gt "0"; do
  case "${1}" in
    -h|--help) # {{{
      usage
      exit 0
      shift;; # }}}
    --git-dir|--work-tree) # {{{
      gitCommand+=("${1}=${2}")
      shift;shift;; # }}}
    --git-add) # {{{
      gitAdd="${2}"
      shift;shift;; # }}}
    -y|--yes) # {{{
      yes=$((yes+1))
      shift;; # }}}
    -n|--noop) # {{{
      gitCommand=("echo" "${gitCommand[@]}")
      shift;; # }}}
    --*) # {{{
      printf "Unknown option: ${1}\n"
      exit 4
      shift;; # }}}
    -*) # {{{
      shopts="${1}"
      if test "${#shopts}" -le "2"; then
        printf "Unknown option: ${shopts}\n"
        exit 5
      fi
      shift
      set -- "${shopts:0:2}" "-${shopts:2}" "${@}"
      ;; # }}}
    *) # {{{
      positional+=("${1}")
      shift;; # }}}
  esac
done

set -- "${positional[@]}"

if test "${#}" -lt "1"; then
  printf "Commit message not supplied, defaulting to current time.\n"
  set -- "$(date +'%a-%Y-%m-%dT%T%z')"
fi

commit "${@}"
# }}}
